<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">
<sqlMap namespace="Test">
    <typeAlias  alias="egovMap" 		type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	<typeAlias  alias="TestCaseVO" 		type="egovframework.let.tms.test.service.TestCaseVO"/>
	<typeAlias  alias="TestScenarioVO" 	type="egovframework.let.tms.test.service.TestScenarioVO"/>
	<typeAlias  alias="TestDefaultVO" 	type="egovframework.let.tms.test.service.TestDefaultVO"/>
	
	<resultMap id="testCaseVO" class="egovframework.let.tms.test.service.TestCaseVO">
	    <result property="testcaseId" column="TESTCASE_ID" columnIndex="1"/>
	    <result property="testcaseContent" column="TESTCASE_CONTENT" columnIndex="2"/>
	    <result property="testcaseGb" column="TESTCASE_GB" columnIndex="3"/>
	    <result property="pgId" column="PG_ID" columnIndex="4"/>
	    <result property="taskGb" column="TASK_GB" columnIndex="5"/>
	    <result property="userId" column="USER_ID" columnIndex="6"/>
	    <result property="enrollDt" column="ENROLL_DT" columnIndex="7"/>
	    <result property="precondition" column="PRECONDITION" columnIndex="8"/>
	    <result property="firstTestResultYn" column="FIRST_TEST_RESULT_YN" columnIndex="9"/>
	    <result property="secondTestResultYn" column="SECOND_TEST_RESULT_YN" columnIndex="10"/>
	    <result property="thirdTestResultYn" column="THIRD_TEST_RESULT_YN" columnIndex="11"/>
	    <result property="completeYn" column="COMPLETE_YN" columnIndex="12"/>
	    <result property="completeDt" column="COMPLETE_DT" columnIndex="13"/>
	    
	</resultMap>
	
	<resultMap id="testCaseVoMap" class="java.util.HashMap">
	    <result property="testcaseId" column="TESTCASE_ID" columnIndex="1"/>
	    <result property="testcaseContent" column="TESTCASE_CONTENT" columnIndex="2"/>
	    <result property="testcaseGbNm" column="TESTCASE_GB_NM" columnIndex="3"/>
	    <result property="pgId" column="PG_ID" columnIndex="4"/>
	    <result property="taskGbNm" column="TASK_GB_NM" columnIndex="5"/>
	    <result property="userId" column="USER_ID" columnIndex="6"/>
	    <result property="enrollDt" column="ENROLL_DT" columnIndex="7"/>
	    <result property="precondition" column="PRECONDITION" columnIndex="8"/>
  	    <result property="pgNm" column="PG_NM" columnIndex="9"/>
  	    <result property="userNm" column="USER_NM" columnIndex="10"/>
  	    <result property="testcaseGbCode" column="TESTCASE_GB_CODE" columnIndex="11"/>
  	    <result property="scenarioCnt" column="SCENARIO_CNT" columnIndex="12"/>
  	    <result property="pCnt" column="P_CNT" columnIndex="13"/>
   	    <result property="completeYn" column="COMPLETE_YN" columnIndex="14"/>
	    <result property="completeDt" column="COMPLETE_DT" columnIndex="15"/>
   	    <result property="taskGbCode" column="TASK_GB_CODE" columnIndex="16"/>
   	    <result property="firstTestResultYn" column="FIRST_TEST_RESULT_YN" columnIndex="17"/>
   	    <result property="secondTestResultYn" column="SECOND_TEST_RESULT_YN" columnIndex="18"/>
   	    <result property="thirdTestResultYn" column="THIRD_TEST_RESULT_YN" columnIndex="19"/>
	</resultMap>
	
	<resultMap id="testScenarioVO" class="egovframework.let.tms.test.service.TestScenarioVO">
	    <result property="testscenarioId" column="TESTSCENARIO_ID" columnIndex="1"/>
	    <result property="testscenarioOrd" column="TESTSCENARIO_ORD" columnIndex="2"/>
	    <result property="testscenarioContent" column="TESTSCENARIO_CONTENT" columnIndex="3"/>
	    <result property="testcaseId" column="TESTCASE_ID" columnIndex="4"/>
	    <result property="userTestId" column="USER_TEST_ID" columnIndex="5"/>
	    <result property="testCondition" column="TEST_CONDITION" columnIndex="6"/>
	    <result property="expectedResult" column="EXPECTED_RESULT" columnIndex="7"/>
	    <result property="enrollDt" column="ENROLL_DT" columnIndex="8"/>
	    <result property="testResultYn" column="TEST_RESULT_YN" columnIndex="9"/>
	    <result property="testDt" column="TEST_DT" columnIndex="10"/>
	    <result property="testResultContent" column="TEST_RESULT_CONTENT" columnIndex="11"/>
	</resultMap>
	
	<resultMap id="testCaseStatsMap" class="java.util.HashMap">
	    <result property="totCnt" column="TOT_CNT" columnIndex="1" javaType="int" jdbcType="NUMERIC" />
	    <result property="yCnt" column="Y_CNT" columnIndex="2" javaType="int" jdbcType="NUMERIC"/>
	</resultMap>
	
		
	<resultMap id="testScenarioStatsMap" class="java.util.HashMap">
	    <result property="scenarioCnt" column="SCENARIO_CNT" columnIndex="1" javaType="int" jdbcType="NUMERIC" />
	    <result property="testCnt" column="TEST_CNT" columnIndex="2" javaType="int" jdbcType="NUMERIC"/>
	    <result property="resultPCnt" column="RESULT_P_CNT" columnIndex="3" javaType="int" jdbcType="NUMERIC"/>
	    <result property="resultFCnt" column="RESULT_F_CNT" columnIndex="4" javaType="int" jdbcType="NUMERIC"/>
	</resultMap>
	
	
	<resultMap id="testCaseCurrentMap" class="java.util.HashMap">
	    <result property="totCnt" column="TOT_CNT" columnIndex="1" javaType="int" jdbcType="NUMERIC"/>
	    <result property="testcaseCnt" column="TESTCASE_CNT" columnIndex="2" javaType="int" jdbcType="NUMERIC"/>
	    <result property="yCnt" column="Y_CNT" columnIndex="3" javaType="int" jdbcType="NUMERIC"/>
	    <result property="nCnt" column="N_CNT" columnIndex="4" javaType="int" jdbcType="NUMERIC"/>
	</resultMap>
	
	<resultMap id="testCaseProgressStatusMap" class="java.util.HashMap">
	    <result property="testcaseGb" column="TESTCASE_GB" columnIndex="1" />
	    <result property="notTestCnt" column="NOT_TEST_CNT" columnIndex="2"/>
	    <result property="firstTestCnt" column="FIRST_TEST_CNT" columnIndex="3" />
	    <result property="secondTestCnt" column="SECOND_TEST_CNT" columnIndex="4" />
	    <result property="completeYCnt" column="COMPLETE_Y_CNT" columnIndex="5" />
	    <result property="testcaseCnt" column="TESTCASE_CNT" columnIndex="6" />
	</resultMap>
	
	
	
	<select id="TestDAO.selectTestCaseStatsListBySysGb"  parameterClass="TestDefaultVO"  resultClass="egovMap">
	    
		
	    <!-- 단위테스트 -->
	    <isNotEqual property="searchByTestcaseGb" compareValue="TC2">
	        
	        <![CDATA[
			SELECT A.CODE AS SYS_GB, A.CODE_NM AS SYS_NM, IFNULL(B.SYS_CNT,0) AS SYS_CNT, IFNULL(B.COMPLETE_Y_CNT,0) AS COMPLETE_Y_CNT
			FROM LETTCCMMNDETAILCODE AS A 
			LEFT JOIN (
			            SELECT COUNT(*) AS SYS_CNT, P.SYS_GB AS SYS_GB , COUNT(IF(D.COMPLETE_YN= 'Y',1,NULL)) AS COMPLETE_Y_CNT
			            FROM TESTCASE_TB AS D, PG_TB AS P
			            WHERE D.PG_ID = P.PG_ID AND P.USE_YN ='Y'
			            GROUP BY SYS_GB
			) AS B 			
			ON A.CODE = B.SYS_GB
			WHERE A.CODE_ID = 'SYSGB'
			
			UNION ALL 
			
			SELECT 'S0' AS SYS_GB ,'전체' AS SYS_NM, COUNT(*) AS SYS_CNT, COUNT(IF(TC.COMPLETE_YN= 'Y',1,NULL)) AS COMPLETE_Y_CNT
			FROM TESTCASE_TB AS TC , PG_TB AS PG 
			WHERE TC.PG_ID = PG.PG_ID AND PG.USE_YN ='Y' AND TC.TESTCASE_GB = 'TC1'
			
			ORDER BY (CASE SYS_NM WHEN '전체' THEN 0 ELSE 1 END) , SYS_CNT DESC
			]]>
		</isNotEqual>
			
			<!-- 통합테스트 -->
		<isEqual property="searchByTestcaseGb" compareValue="TC2">
		
		<![CDATA[
			SELECT X.CODE AS SYS_GB, X.CODE_NM AS SYS_NM, IF(Y.TASK_CNT IS NULL,0,Y.TASK_CNT) AS SYS_CNT, IF(Y.COMPLETE_Y_CNT IS NULL,0,Y.COMPLETE_Y_CNT) AS COMPLETE_Y_CNT
			FROM 	LETTCCMMNDETAILCODE AS X
			
			LEFT JOIN (
					SELECT A.PARENT, B.TASK_GB, IF(B.TASK_CNT IS NULL,0,B.TASK_CNT) AS TASK_CNT, IF(B.COMPLETE_YN IS NULL,0,B.COMPLETE_YN) AS COMPLETE_Y_CNT
					FROM
						(	
						SELECT CODE_ID, CODE, CODE_NM, PARENT
						FROM LETTCCMMNDETAILCODE 
						WHERE CODE_ID = 'TASKGB'
						) AS A
					
			RIGHT JOIN	
				(
				SELECT TASK_GB, COUNT(TASK_GB)AS TASK_CNT, IF(COMPLETE_YN = 'Y',1,0) AS COMPLETE_YN
				FROM TESTCASE_TB
				WHERE TESTCASE_GB = 'TC2'
				GROUP BY TASK_GB
				
				) AS B
				ON A.CODE = B.TASK_GB
				GROUP BY A.PARENT
				
			) AS Y		
				
			ON X.CODE = Y.PARENT
			WHERE X.CODE_ID = 'SYSGB'	
			
			UNION ALL 
			
			SELECT 'S0' AS SYS_GB , '전체' AS SYS_NM, COUNT(*) AS SYS_CNT, COUNT(IF(COMPLETE_YN= 'Y',1,NULL)) AS COMPLETE_Y_CNT
			FROM TESTCASE_TB 
			WHERE TESTCASE_GB = 'TC2'
			
			ORDER BY (CASE SYS_NM WHEN '전체' THEN 0 ELSE 1 END) , SYS_CNT DESC
			
			]]>
		</isEqual>
			
	</select>
	
	
	<select id="TestDAO.selectTestCaseStatsListByTaskGb"  parameterClass="TestDefaultVO" resultClass="egovMap">
	
	    
	     <!-- 단위테스트 -->
	    <isNotEqual property="searchByTestcaseGb" compareValue="TC2">
	       <![CDATA[
		SELECT A.CODE AS TASK_GB, A.CODE_NM AS TASK_NM, IFNULL(B.TASK_GB_CNT,0) AS TASK_GB_CNT , IFNULL(B.COMPLETE_Y_CNT,0) AS COMPLETE_Y_CNT
		FROM 
		(SELECT * FROM LETTCCMMNDETAILCODE 
			]]>
		<isNotNull property="searchKeyword">
		WHERE PARENT = (SELECT CODE FROM LETTCCMMNDETAILCODE WHERE CODE_NM = #searchKeyword# AND CODE_ID = 'SYSGB')
		</isNotNull>
		
		 <![CDATA[
		) AS A 
		
		LEFT JOIN
		
		(SELECT P.TASK_GB AS TASK_GB, P.SYS_GB AS SYS_GB, COUNT(P.TASK_GB) as TASK_GB_CNT , COUNT(IF(COMPLETE_YN = 'Y',1,NULL)) as COMPLETE_Y_CNT
		FROM TESTCASE_TB AS D, PG_TB AS P
		WHERE D.PG_ID = P.PG_ID AND P.USE_YN ='Y'
		GROUP BY TASK_GB
		) AS B 
						
		ON A.CODE = B.TASK_GB
		WHERE A.CODE_ID ='TASKGB'
		ORDER BY B.TASK_GB_CNT DESC, A.CODE ASC
		
		]]>
		</isNotEqual>
		
		
		<!-- 통합테스트 -->
		<isEqual property="searchByTestcaseGb" compareValue="TC2">
		
		  <![CDATA[
		SELECT A.CODE AS TASK_GB, A.CODE_NM AS TASK_NM, IFNULL(B.TASK_GB_COUNT,0) AS TASK_GB_CNT , IFNULL(B.COMPLETE_Y_CNT,0) AS COMPLETE_Y_CNT
		FROM 
		(SELECT * FROM LETTCCMMNDETAILCODE
		]]>
		
		<isNotNull property="searchKeyword">
		WHERE PARENT = (SELECT CODE FROM LETTCCMMNDETAILCODE WHERE CODE_NM = #searchKeyword# AND CODE_ID = 'SYSGB')
		</isNotNull>
		
		 <![CDATA[
		 ) AS A 
		
		LEFT JOIN
	
		(SELECT COUNT(TASK_GB) as TASK_GB_COUNT, TASK_GB, COUNT(IF(COMPLETE_YN = 'Y',1,NULL)) as COMPLETE_Y_CNT
		FROM TESTCASE_TB 
		WHERE TESTCASE_GB = 'TC2'
		GROUP BY TASK_GB
		) AS B 
						
		ON A.CODE = B.TASK_GB
		WHERE A.CODE_ID ='TASKGB'
	
		ORDER BY B.TASK_GB_COUNT DESC, A.CODE ASC
		]]>
		</isEqual>
	</select>
	
	
	<insert id="TestDAO.insertTestCase" parameterClass="TestCaseVO">
		    
		    INSERT INTO TESTCASE_TB ( 
			    TESTCASE_ID
			    , TESTCASE_CONTENT
			    , TESTCASE_GB
			    , TASK_GB
			    , USER_ID
			    , ENROLL_DT
			    , PRECONDITION 
			    
			    <!-- 화면ID 값이 있을 경우에만 입력 -->
				<isNotEmpty property="pgId">
				   ,PG_ID
				</isNotEmpty>
				) VALUES (
		    		  #testcaseId#
		    		, #testcaseContent#
		    		, #testcaseGb#
		    		, #taskGb#
		    		, #userId#
		    		, now()
		    		,#precondition#
		    	<!-- 화면ID 값이 있을 경우에만 입력 -->
				<isNotEmpty property="pgId">
				   	, #pgId#
				</isNotEmpty>	
		    	)
	</insert>
	
	<insert id="TestDAO.insertTestScenario" parameterClass="TestScenarioVO">
	    
		    INSERT INTO TESTSCENARIO_TB ( 
		    	 TESTSCENARIO_ID
		    	, TESTSCENARIO_ORD
		    	, TESTSCENARIO_CONTENT
		    	, TESTCASE_ID
		    	, TEST_CONDITION
		    	, EXPECTED_RESULT
		    	, ENROLL_DT 
		    	
	    	) VALUES (
		    		 #testscenarioId#
		    		, #testscenarioOrd#
		    		, #testscenarioContent#
		    		, #testcaseId#
		    		, #testCondition#
		    		, #expectedResult#
		    		, now()
	    	)
	</insert>
	
	
	<update id="TestDAO.updateTestCase" parameterClass="TestCaseVO">
	    
		    UPDATE TESTCASE_TB
		    
		    <dynamic prepend = "SET" >
		        
		        <isNotEmpty property="firstTestResultYn" prepend = ",">
	     			FIRST_TEST_RESULT_YN = #firstTestResultYn#
	       		</isNotEmpty>
	       		
		        <isNotEmpty property="secondTestResultYn" prepend = ",">
	     			SECOND_TEST_RESULT_YN = #secondTestResultYn#
	       		</isNotEmpty>
	       		
		    	<isNotEmpty property="completeYn" prepend = ",">
	     			COMPLETE_YN = #completeYn#
	     			
	     			<isEqual property="completeYn" compareValue="Y">
	     			    , COMPLETE_DT = now()
	     			</isEqual>
	     			
	       		</isNotEmpty>
	       		
		    	<isNotEmpty property="precondition" prepend = ",">
	     			PRECONDITION = #precondition#
	       		</isNotEmpty>
	       		
	    		<isNotEmpty property="testcaseContent" prepend = ",">
	     			TESTCASE_CONTENT = #testcaseContent#
	       		</isNotEmpty>
			 
	    	</dynamic>
			WHERE TESTCASE_ID = #testcaseId#
	    
	</update>
	
	<update id="TestDAO.updateTestScenario" parameterClass="TestScenarioVO">
	    
	    UPDATE TESTSCENARIO_TB
	    
	    <dynamic prepend = "SET" >
	    
	    	<isNotEmpty property="testCondition" prepend = ",">
	     			TEST_CONDITION = #testCondition#
	       	</isNotEmpty>
	       	
	    	<isNotEmpty property="testResultYn" prepend = ",">
	     			TEST_RESULT_YN = #testResultYn#
	     			, TEST_DT = now()
	       	</isNotEmpty>
	       	
	    	<isNotEmpty property="testResultContent" prepend = ",">
	     			TEST_RESULT_CONTENT = #testResultContent#
	       	</isNotEmpty>
	    	
	    	<isNotEmpty property="testscenarioOrd" prepend = ",">
	     			TESTSCENARIO_ORD = #testscenarioOrd#
	       	</isNotEmpty>
	       		
	    	<isNotEmpty property="testscenarioContent" prepend = ",">
	     			TESTSCENARIO_CONTENT = #testscenarioContent#
	       	</isNotEmpty>
	       		
	    	 <isNotEmpty property="expectedResult" prepend = ",">
	     			EXPECTED_RESULT = #expectedResult#
	       	</isNotEmpty>
	       	
	    </dynamic>
	    	  
		WHERE TESTSCENARIO_ID = #testscenarioId#
		
	</update>
	
	<update id="TestDAO.updateTestScenarioResult" parameterClass="TestScenarioVO">
	    
	    UPDATE TESTSCENARIO_TB
	    
	    <dynamic prepend = "SET" >
	    	
	    	<isNotEmpty property="testResultYn" prepend = ",">
	     			TEST_RESULT_YN = #testResultYn#
	     			, TEST_DT = now()
	     			, USER_TEST_ID = #userTestId#
	       	</isNotEmpty>
	       	
	    	<isNotEmpty property="testResultContent" prepend = ",">
	     			TEST_RESULT_CONTENT = #testResultContent#
	       	</isNotEmpty>
	    
	    </dynamic>
	    	  
		WHERE TESTSCENARIO_ID = #testscenarioId#
		
	</update>
	
	<delete id="TestDAO.deleteTestCase" parameterClass="java.lang.String" >
	    
		DELETE
		FROM TESTCASE_TB
		WHERE TESTCASE_ID = #testcaseId#
	    
	</delete>
	
	
	<delete id="TestDAO.deleteTestScenario" parameterClass="java.lang.String" >
	    
		DELETE
		FROM TESTSCENARIO_TB
		WHERE TESTSCENARIO_ID = #testscenarioId#
	    
	</delete>

		
	<select id="TestDAO.selectScenarioCntReferringToCase" parameterClass="java.lang.String" resultClass="java.lang.Integer"  >
	    
	    SELECT COUNT(*)
		FROM TESTSCENARIO_TB
		WHERE TESTCASE_ID = #checkedMenuNoForDel#
	    
	</select>
	
	
	<select id="TestDAO.selectTestCase" parameterClass="java.lang.String" resultMap="testCaseVoMap" >
		<![CDATA[
		
				SELECT 
					   	  a. TESTCASE_ID
						, a.TESTCASE_CONTENT
						, ( SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = a.TESTCASE_GB ) AS TESTCASE_GB_NM
						, a.TESTCASE_GB AS TESTCASE_GB_CODE
						, a.PG_ID
						, ( SELECT PG_NM FROM PG_TB WHERE PG_ID = a.PG_ID ) AS PG_NM
						, ( SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = a.TASK_GB ) AS TASK_GB_NM
						, a.TASK_GB AS TASK_GB_CODE
						, ( SELECT USER_NM FROM LETTNEMPLYRINFO WHERE EMPLYR_ID = a.USER_ID ) AS USER_NM
						, a.USER_ID
						, a.ENROLL_DT
						, a.PRECONDITION
						, a.FIRST_TEST_RESULT_YN 
						, a.SECOND_TEST_RESULT_YN 
						, a.THIRD_TEST_RESULT_YN 
						, ( SELECT COUNT(*) FROM TESTSCENARIO_TB WHERE TESTCASE_ID = a.TESTCASE_ID ) AS SCENARIO_CNT
						, ( SELECT COUNT(*) FROM TESTSCENARIO_TB WHERE TESTCASE_ID = a.TESTCASE_ID AND TEST_RESULT_YN = 'P' ) AS P_CNT
						, a.COMPLETE_YN
						, a.COMPLETE_DT
						
				FROM TESTCASE_TB AS a
				WHERE TESTCASE_ID = #testcaseId#
			
		]]>
			
	</select>	
	
	<select id="TestDAO.selectTestCaseListTotCnt" parameterClass="TestDefaultVO" resultClass="java.lang.Integer" >
			<![CDATA[
				SELECT COUNT(*) totcnt 					
				FROM (					
					SELECT * FROM (						
						SELECT 							 
							  a. TESTCASE_ID							
							, a.PG_ID	
							, ( SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = a.TASK_GB ) AS TASK_GB_NM	
							, a.TASK_GB AS TASK_GB_CODE	
							, ( SELECT USER_NM FROM LETTNEMPLYRINFO WHERE EMPLYR_ID = a.USER_ID ) AS USER_NM	
							, a.ENROLL_DT	
							, a.COMPLETE_YN	
								
							FROM TESTCASE_TB AS a	
							WHERE TESTCASE_GB = #searchByTestcaseGb#
							) AS b
							WHERE 1=1
		]]>
			<!-- 테스트케이스 ID로 검색 -->
			<isNotEmpty property="searchByTestcaseId">
			    AND TESTCASE_ID = #searchByTestcaseId#
			</isNotEmpty>    
			
			<!-- 화면ID로 검색 -->
			<isNotEmpty property="searchByPgId">
			    AND PG_ID = #searchByPgId#
			</isNotEmpty>
			
			<!-- 업무구분으로 검색 -->
			<isNotEmpty property="searchByTaskGb">
			    AND TASK_GB_NM = #searchByTaskGb#
			</isNotEmpty> 
			
			<!-- 완료여부로 검색 -->
			<isNotEmpty property="searchByResultYn">
			    AND COMPLETE_YN = #searchByResultYn#
			</isNotEmpty> 
			
			<!-- 작성자로 검색 -->
			<isNotEmpty property="searchByUserDevId">
			    AND USER_NM = #searchByUserDevId#
			</isNotEmpty> 
			
			<!-- 등록 일자로 검색 -->
			<isNotEmpty property="searchByStartDt" >
            <isNotEmpty property="searchByEndDt">
                AND ENROLL_DT BETWEEN DATE(#searchByStartDt#) AND DATE(#searchByEndDt#)
            </isNotEmpty>
            </isNotEmpty>
			
			<![CDATA[          
			) AS c
			]]>
	</select>	
	
	
	<select id="TestDAO.selectTestCaseList" parameterClass="TestDefaultVO" resultClass="egovMap">
			<![CDATA[
				SELECT * FROM (
					SELECT 
						  a. TESTCASE_ID
						, a.TESTCASE_CONTENT
						, ( SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = a.TESTCASE_GB ) AS TESTCASE_GB_NM
						, a.TESTCASE_GB AS TESTCASE_GB_CODE
						, a.PG_ID
						, ( SELECT PG_NM FROM PG_TB WHERE PG_ID = a.PG_ID ) AS PG_NM
						, ( SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = a.TASK_GB ) AS TASK_GB_NM
						, a.TASK_GB AS TASK_GB_CODE
						, ( SELECT USER_NM FROM LETTNEMPLYRINFO WHERE EMPLYR_ID = a.USER_ID ) AS USER_NM
						, a.USER_ID
						, a.ENROLL_DT
						, a.PRECONDITION
						, a.FIRST_TEST_RESULT_YN 
						, a.SECOND_TEST_RESULT_YN 
						, a.THIRD_TEST_RESULT_YN 
						, ( SELECT COUNT(*) FROM TESTSCENARIO_TB WHERE TESTCASE_ID = a.TESTCASE_ID ) AS SCENARIO_CNT
						, ( SELECT COUNT(*) FROM TESTSCENARIO_TB WHERE TESTCASE_ID = a.TESTCASE_ID AND TEST_RESULT_YN IS NOT NULL ) AS TEST_Y_CNT
						, ( SELECT COUNT(*) FROM TESTSCENARIO_TB WHERE TESTCASE_ID = a.TESTCASE_ID AND TEST_RESULT_YN = 'P' ) AS P_CNT
						, ( SELECT COUNT(*) FROM TESTSCENARIO_TB WHERE TESTCASE_ID = a.TESTCASE_ID AND TEST_RESULT_YN = 'F' ) AS F_CNT
						, a.COMPLETE_YN
						, a.COMPLETE_DT
						
					FROM TESTCASE_TB AS a
					WHERE TESTCASE_GB = #searchByTestcaseGb#
					) AS b
				WHERE 1=1
			]]>
			
			<!-- 테스트케이스 ID로 검색 -->
			<isNotEmpty property="searchByTestcaseId">
			    AND TESTCASE_ID = #searchByTestcaseId#
			</isNotEmpty>    
			
			<!-- 화면ID로 검색 -->
			<isNotEmpty property="searchByPgId">
			    AND PG_ID = #searchByPgId#
			</isNotEmpty> 
			
			<!-- 업무구분으로 검색 -->
			<isNotEmpty property="searchByTaskGb">
			    AND TASK_GB_NM = #searchByTaskGb#
			</isNotEmpty> 
			
			<!-- 완료여부로 검색 -->
			<isNotEmpty property="searchByResultYn">
			    AND COMPLETE_YN = #searchByResultYn#
			</isNotEmpty> 
			
			<!-- 작성자로 검색 -->
			<isNotEmpty property="searchByUserDevId">
			    AND USER_NM = #searchByUserDevId#
			</isNotEmpty> 
			
			<!-- 등록 일자로 검색 -->
			<isNotEmpty property="searchByStartDt" >
            <isNotEmpty property="searchByEndDt">
                AND ENROLL_DT BETWEEN DATE(#searchByStartDt#) AND DATE(#searchByEndDt#)
            </isNotEmpty>
            </isNotEmpty>
			
			ORDER BY ENROLL_DT DESC
			LIMIT #recordCountPerPage# OFFSET #firstIndex#
	</select>
	
	
	<!-- 테스트 시나리오 가져오기 -->
	<select id="TestDAO.selectTestScenario" parameterClass="java.lang.String" resultMap="testScenarioVO" >
		<![CDATA[
				SELECT 
					  TESTSCENARIO_ID
					, TESTSCENARIO_ORD
					, TESTSCENARIO_CONTENT
					, TESTCASE_ID
					, (SELECT USER_NM FROM LETTNEMPLYRINFO WHERE EMPLYR_ID = USER_TEST_ID) AS USER_TEST_ID
					, TEST_CONDITION
					, EXPECTED_RESULT
					, ENROLL_DT
					, TEST_RESULT_YN
					, TEST_DT
					, TEST_RESULT_CONTENT 
					
				FROM TESTSCENARIO_TB
				WHERE TESTSCENARIO_ID = #testscenarioId#
		]]>
	</select>	
	
	
	<!-- 테스트 시나리오 목록 -->
	<select id="TestDAO.selectTestScenarioList" parameterClass="java.lang.String" resultClass="egovMap">
			<![CDATA[
				SELECT 
						 TESTSCENARIO_ID
						,TESTSCENARIO_ORD
						,TESTSCENARIO_CONTENT
						,TESTCASE_ID
						, (SELECT USER_NM FROM LETTNEMPLYRINFO WHERE EMPLYR_ID = USER_TEST_ID) AS USER_TEST_NM
						, USER_TEST_ID
						,TEST_CONDITION
						,EXPECTED_RESULT
						,ENROLL_DT
						,TEST_RESULT_YN
						,TEST_DT
						,TEST_RESULT_CONTENT 
						
				FROM TESTSCENARIO_TB
				WHERE TESTCASE_ID = #testcaseId#
				ORDER BY TESTSCENARIO_ORD ASC
			]]>
	</select>

	<!-- 테스트 시나리오 목록 개수 -->
	<select id="TestDAO.selectTestScenarioListTotCnt" parameterClass="java.lang.String" resultClass="java.lang.Integer" >
			<![CDATA[
				SELECT COUNT(*) totcnt 
				FROM (
					SELECT *
					FROM TESTSCENARIO_TB AS a 
					WHERE TESTCASE_ID = #testcaseId#
		
			) AS b
			
			]]>
	</select>
	
	
	
	<select id="TestDAO.selectTestCaseStats" parameterClass="java.lang.String" resultMap="testCaseStatsMap">
	    
	    <![CDATA[
		SELECT 
			 ( SELECT COUNT(*) FROM ( SELECT * FROM TESTCASE_TB WHERE TESTCASE_GB = #testcaseGb# ) AS b ) AS TOT_CNT
		   , ( SELECT COUNT(*) FROM ( SELECT * FROM TESTCASE_TB WHERE TESTCASE_GB = #testcaseGb# AND COMPLETE_YN = 'Y' ) AS c ) AS Y_CNT
		]]>
	</select>
	
	
	<select id="TestDAO.selectTestScenarioStats" parameterClass="java.lang.String" resultMap="testScenarioStatsMap">
	    
	    <![CDATA[
	    
	    SELECT 
			COUNT(*) AS SCENARIO_CNT
			, COUNT(IF(TEST_RESULT_YN = 'P' OR TEST_RESULT_YN = 'F',1,NULL)) AS TEST_CNT
			, COUNT(IF(TEST_RESULT_YN = 'P',1,NULL)) AS RESULT_P_CNT
			, COUNT(IF(TEST_RESULT_YN = 'F',1,NULL)) AS RESULT_F_CNT
		FROM TESTSCENARIO_TB
		WHERE TESTCASE_ID = #testcaseId#
					
		]]>
	</select>
	
	
	
	
	
	
	<select id="TestDAO.selectTestCaseProgressStatus" parameterClass="java.lang.String"  resultMap="testCaseProgressStatusMap">
	    
	    <![CDATA[
				SELECT 			
					TESTCASE_GB
					,COUNT(IF(FIRST_TEST_RESULT_YN = 'N',1,NULL)) AS NOT_TEST_CNT
					,COUNT(IF(FIRST_TEST_RESULT_YN = 'Y' AND SECOND_TEST_RESULT_YN = 'N',1,NULL)) AS FIRST_TEST_CNT
					,COUNT(IF(FIRST_TEST_RESULT_YN = 'Y' AND SECOND_TEST_RESULT_YN = 'Y' AND COMPLETE_YN = 'N',1,NULL)) AS SECOND_TEST_CNT
					,COUNT(IF(COMPLETE_YN='Y',1,NULL)) AS COMPLETE_Y_CNT
					,COUNT(*) AS TESTCASE_CNT
					FROM TESTCASE_TB WHERE TESTCASE_GB = #testcaseGb# 
		]]>
	</select>
	
	
	
	
	
	<select id="TestDAO.selectTestCurrent" parameterClass="TestDefaultVO" resultClass="egovMap">
	
	  	<!-- 단위테스트 현황 -->
	    <isNotEqual property="searchByTestcaseGb" compareValue="TC2">
		        <![CDATA[	
				SELECT * FROM (	
						SELECT 
							A.PG_ID
							, A.PG_NM
							, ( SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = A.TASK_GB ) AS TASK_GB_NM
							, A.TASK_GB AS TASK_GB_CODE
							, ( SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = B.TESTCASE_GB ) AS TESTCASE_GB_NM
							, B.TESTCASE_GB
							, B.TESTCASE_ID
							, B.TESTCASE_CONTENT
							, ( SELECT USER_NM FROM LETTNEMPLYRINFO WHERE EMPLYR_ID = B.USER_ID ) AS USER_NM
							, B.USER_ID
							, B.ENROLL_DT
							, B.COMPLETE_DT
							, B.FIRST_TEST_RESULT_YN
							, B.SECOND_TEST_RESULT_YN
							, B.THIRD_TEST_RESULT_YN
							, B.COMPLETE_YN
							FROM PG_TB AS A
							LEFT OUTER JOIN
							TESTCASE_TB AS B
							ON A.PG_ID = B.PG_ID
							WHERE A.USE_YN = 'Y'
						) AS C
				WHERE 1=1
				]]>			
  		</isNotEqual>
	    
	    
	 	<!--   통합 테스트 현황 -->
	    <isEqual property="searchByTestcaseGb" compareValue="TC2">
    		<![CDATA[
				SELECT * FROM (
					SELECT 
						a. TESTCASE_ID
						, a.TESTCASE_CONTENT
						, ( SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = a.TESTCASE_GB ) AS TESTCASE_GB_NM
						, a.TESTCASE_GB
						, a.PG_ID
						, ( SELECT PG_NM FROM PG_TB WHERE PG_ID = a.PG_ID ) AS PG_NM
						, ( SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = a.TASK_GB ) AS TASK_GB_NM
						, a.TASK_GB AS TASK_GB_CODE
						, ( SELECT USER_NM FROM LETTNEMPLYRINFO WHERE EMPLYR_ID = a.USER_ID ) AS USER_NM
						, a.USER_ID
						, a.ENROLL_DT
						, a.PRECONDITION
						, a.FIRST_TEST_RESULT_YN 
						, a.SECOND_TEST_RESULT_YN 
						, a.THIRD_TEST_RESULT_YN 
						, a.COMPLETE_YN
						, a.COMPLETE_DT
						
						FROM TESTCASE_TB AS a
						WHERE TESTCASE_GB = 'TC2'
						) AS b
				WHERE 1=1
			]]>
		</isEqual>
	    
				<!-- 테스트케이스 ID로 검색 -->
				<isNotEmpty property="searchByTestcaseId">
				    AND TESTCASE_ID = #searchByTestcaseId#
				</isNotEmpty>    
				
				<!-- 화면ID로 검색 -->
				<isNotEmpty property="searchByPgId">
				    AND PG_ID = #searchByPgId#
				</isNotEmpty> 
				
				<!-- 업무구분으로 검색 -->
				<isNotEmpty property="searchByTaskGb">
				    AND TASK_GB_NM = #searchByTaskGb#
				</isNotEmpty> 
				
				<!-- 완료여부로 검색 -->
				<isNotEmpty property="searchByResultYn">
				    AND COMPLETE_YN = #searchByResultYn#
				</isNotEmpty> 
				
				<!-- 작성자로 검색 -->
				<isNotEmpty property="searchByUserDevId">
				    AND USER_NM = #searchByUserDevId#
				</isNotEmpty> 
				
				ORDER BY ENROLL_DT DESC
				
				<!-- 엑셀 다운로드 -->
				<isNotEqual property="isExcel" compareValue="true">
				     LIMIT #recordCountPerPage# OFFSET #firstIndex#
				</isNotEqual> 
				
	</select>
	
	
	<select id="TestDAO.selectTestCurrentTotCnt" parameterClass="TestDefaultVO" resultClass="java.lang.Integer" >
			
		<!-- 단위테스트 현황 -->
	    <isNotEqual property="searchByTestcaseGb" compareValue="TC2">
	        	<![CDATA[
				SELECT COUNT(*) totcnt 
				FROM (
						SELECT * FROM (
							SELECT 
								A.PG_ID
								, ( SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = A.TASK_GB ) AS TASK_GB_NM
								, A.TASK_GB AS TASK_GB_CODE
								, B.TESTCASE_ID
								, ( SELECT USER_NM FROM LETTNEMPLYRINFO WHERE EMPLYR_ID = B.USER_ID ) AS USER_NM
								, B.ENROLL_DT
								, B.COMPLETE_DT
								, B.FIRST_TEST_RESULT_YN
								, B.SECOND_TEST_RESULT_YN
								, B.COMPLETE_YN
							FROM PG_TB AS A
							LEFT OUTER JOIN
							TESTCASE_TB AS B
							ON A.PG_ID = B.PG_ID
							WHERE A.USE_YN = 'Y'
						) AS C
				WHERE 1=1
				]]>
	     </isNotEqual>  
	        
	     <!-- 통합 테스트 현황 -->
	    <isEqual property="searchByTestcaseGb" compareValue="TC2">
	        <![CDATA[
				SELECT COUNT(*) totcnt 
				FROM (
						SELECT * FROM (
							SELECT 
							  a. TESTCASE_ID
							, a.PG_ID
							, ( SELECT PG_NM FROM PG_TB WHERE PG_ID = a.PG_ID ) AS PG_NM
							, ( SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = a.TASK_GB ) AS TASK_GB_NM
							, a.TASK_GB AS TASK_GB_CODE
							, ( SELECT USER_NM FROM LETTNEMPLYRINFO WHERE EMPLYR_ID = a.USER_ID ) AS USER_NM
							, a.USER_ID
							, a.ENROLL_DT
							, a.FIRST_TEST_RESULT_YN 
							, a.SECOND_TEST_RESULT_YN 
							, a.COMPLETE_YN
							, a.COMPLETE_DT
							
							FROM TESTCASE_TB AS a
							WHERE TESTCASE_GB = 'TC2'
						) AS b
				WHERE 1=1
		]]>
				
        </isEqual>
        
  				<!-- 테스트케이스 ID로 검색 -->
			<isNotEmpty property="searchByTestcaseId">
			    AND TESTCASE_ID = #searchByTestcaseId#
			</isNotEmpty>    
			
			<!-- 화면ID로 검색 -->
			<isNotEmpty property="searchByPgId">
			    AND PG_ID = #searchByPgId#
			</isNotEmpty> 
			
			<!-- 업무구분으로 검색 -->
			<isNotEmpty property="searchByTaskGb">
			    AND TASK_GB_NM = #searchByTaskGb#
			</isNotEmpty> 
			
			<!-- 완료여부로 검색 -->
			<isNotEmpty property="searchByResultYn">
			    AND COMPLETE_YN = #searchByResultYn#
			</isNotEmpty> 
			
			<!-- 작성자로 검색 -->
			<isNotEmpty property="searchByUserDevId">
			    AND USER_NM = #searchByUserDevId#
			</isNotEmpty> 
			
			<![CDATA[          
			) AS FINAL
			]]>
	        
	</select>	
	
	<select id="TestDAO.selectTestCurrentCnt" parameterClass="TestDefaultVO" resultMap="testCaseCurrentMap" >
			
			<!-- 단위테스트 현황 -->
		    <isNotEqual property="searchByTestcaseGb" compareValue="TC2">
				<![CDATA[
					SELECT TOT_CNT, TESTCASE_CNT, Y_CNT, N_CNT
					FROM (
						SELECT COUNT(*) TOT_CNT , COUNT(TESTCASE_ID) TESTCASE_CNT, COUNT(IF(COMPLETE_YN='Y',1,NULL)) AS Y_CNT, COUNT(IF(COMPLETE_YN='N',1,NULL)) AS N_CNT
						FROM (
								SELECT * FROM (
									SELECT 
										A.PG_ID
										, ( SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = A.TASK_GB ) AS TASK_GB_NM
										, A.TASK_GB AS TASK_GB_CODE
										, B.TESTCASE_ID
										, ( SELECT USER_NM FROM LETTNEMPLYRINFO WHERE EMPLYR_ID = B.USER_ID ) AS USER_NM
										, B.ENROLL_DT
										, B.COMPLETE_DT
										, B.FIRST_TEST_RESULT_YN
										, B.SECOND_TEST_RESULT_YN
										, B.COMPLETE_YN
									FROM PG_TB AS A
									LEFT OUTER JOIN
									TESTCASE_TB AS B
									ON A.PG_ID = B.PG_ID
									WHERE A.USE_YN = 'Y'
								) AS C
							)AS D
						WHERE 1=1
		]]>
		</isNotEqual>	
		
   	    <!-- 통합 테스트 현황 -->
	    <isEqual property="searchByTestcaseGb" compareValue="TC2">
	        <![CDATA[
				SELECT TOT_CNT,  TESTCASE_CNT, Y_CNT, N_CNT
				FROM (
						SELECT COUNT(*) TOT_CNT , COUNT(TESTCASE_ID) TESTCASE_CNT, COUNT(IF(COMPLETE_YN='Y',1,NULL)) AS Y_CNT, COUNT(IF(COMPLETE_YN='N',1,NULL)) AS N_CNT
						FROM (
							SELECT * FROM (
								SELECT 
								  a. TESTCASE_ID
								, a.PG_ID
								, ( SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = a.TASK_GB ) AS TASK_GB_NM
								, a.TASK_GB AS TASK_GB_CODE
								, ( SELECT USER_NM FROM LETTNEMPLYRINFO WHERE EMPLYR_ID = a.USER_ID ) AS USER_NM
								, a.USER_ID
								, a.ENROLL_DT
								, a.FIRST_TEST_RESULT_YN 
								, a.SECOND_TEST_RESULT_YN 
								, a.COMPLETE_YN
								, a.COMPLETE_DT
								
								FROM TESTCASE_TB AS a
								WHERE TESTCASE_GB = 'TC2'
							) AS b
						) AS c 
				WHERE 1=1
		]]>
	    </isEqual> 
	    
   			<!-- 테스트케이스 ID로 검색 -->
			<isNotEmpty property="searchByTestcaseId">
			    AND TESTCASE_ID = #searchByTestcaseId#
			</isNotEmpty>    
			
			<!-- 화면ID로 검색 -->
			<isNotEmpty property="searchByPgId">
			    AND PG_ID = #searchByPgId#
			</isNotEmpty> 
			
			<!-- 업무구분으로 검색 -->
			<isNotEmpty property="searchByTaskGb">
			    AND TASK_GB_NM = #searchByTaskGb#
			</isNotEmpty> 
			
			<!-- 완료여부로 검색 -->
			<isNotEmpty property="searchByResultYn">
			    AND COMPLETE_YN = #searchByResultYn#
			</isNotEmpty> 
			
			<!-- 작성자로 검색 -->
			<isNotEmpty property="searchByUserDevId">
			    AND USER_NM = #searchByUserDevId#
			</isNotEmpty> 
			
			<![CDATA[    
			) AS FINAL
			]]>
	</select>	
	
	
	<select id="TestDAO.selectTestStatsTable" parameterClass="TestDefaultVO" resultClass="egovMap">
			<![CDATA[
		
				SELECT 
					 IFNULL(A.SYS_NM,"합계") AS SYS_NM
					,IFNULL(B.TASK_NM,"소계") AS TASK_NM
					,IFNULL(SUM(PG_TB.PG_CNT),0) AS PG_CNT
					,IFNULL(SUM(TESTCASE_TB.TC_WRITE_Y_CNT),0) AS TC_WRITE_Y_CNT	
					,IFNULL(SUM(TESTCASE_TB.NOT_TEST_CNT),0) AS NOT_TEST_CNT
					,IFNULL(SUM(TESTCASE_TB.FIRST_TEST_CNT),0) AS FIRST_TEST_CNT
					,IFNULL(SUM(TESTCASE_TB.SECOND_TEST_CNT),0) AS SECOND_TEST_CNT
					,IFNULL(ROUND((100 * SUM(TESTCASE_TB.FIRST_TEST_CNT))/SUM(TESTCASE_TB.TC_WRITE_Y_CNT),1),0) AS TC_PROGRESS_PCT	
					,IFNULL(SUM(TESTCASE_TB.Y_CNT),0) AS TC_RESULT_Y_CNT
					,IFNULL(SUM(TESTCASE_TB.N_CNT),0) AS TC_RESULT_N_CNT
					,IFNULL(ROUND((100 * SUM(TESTCASE_TB.Y_CNT))/SUM(TESTCASE_TB.TC_WRITE_Y_CNT),1),0) AS TC_RESULT_PCT
				
				FROM 
					(SELECT CODE AS SYS_GB, CODE_NM AS SYS_NM FROM LETTCCMMNDETAILCODE WHERE CODE_ID = 'SYSGB') AS A
				INNER JOIN
					(SELECT CODE AS TASK_GB, CODE_NM AS TASK_NM, PARENT FROM LETTCCMMNDETAILCODE) AS B 
				ON A.SYS_GB = B.PARENT 
					
				LEFT OUTER JOIN
					(SELECT TASK_GB, COUNT(*) AS PG_CNT FROM PG_TB WHERE USE_YN = 'Y' GROUP BY TASK_GB) AS PG_TB
				ON B.TASK_GB = PG_TB.TASK_GB
					
				LEFT OUTER JOIN
					(SELECT TASK_GB, TESTCASE_GB
					,COUNT(IF(COMPLETE_YN='Y',1,NULL)) AS Y_CNT
					,COUNT(IF(COMPLETE_YN='N' OR COMPLETE_YN IS NULL,1,NULL)) AS N_CNT
					,COUNT(IF(FIRST_TEST_RESULT_YN = 'Y',1,NULL)) AS FIRST_TEST_CNT
					,COUNT(IF(SECOND_TEST_RESULT_YN = 'Y',1,NULL)) AS SECOND_TEST_CNT
					,COUNT(IF(FIRST_TEST_RESULT_YN IS NULL AND SECOND_TEST_RESULT_YN IS NULL,1,NULL)) AS NOT_TEST_CNT
					,COUNT(TASK_GB) AS TC_WRITE_Y_CNT
					FROM TESTCASE_TB WHERE TESTCASE_GB = #searchByTestcaseGb# GROUP BY TASK_GB) AS TESTCASE_TB
				ON B.TASK_GB = TESTCASE_TB.TASK_GB	
				GROUP BY A.SYS_NM, B.TASK_NM  WITH ROLLUP
			
			]]>
			
	</select>
</sqlMap>